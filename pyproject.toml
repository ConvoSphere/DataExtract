[project]
name = "universal-file-extractor-api"
version = "0.1.0"
description = "Eine einheitliche API für die Extraktion von Inhalten aus verschiedenen Dateiformaten"
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "python-multipart>=0.0.6",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    # docling für Datenextraktion
    "docling>=0.1.0",
    # Dokument-Extraktion
    "python-docx>=1.1.0",
    "PyPDF2>=3.0.1",
    "python-pptx>=0.6.23",
    "odfpy>=1.4.1",
    # Tabellen-Extraktion
    "pandas>=2.1.4",
    "openpyxl>=3.1.2",
    "xlrd>=2.0.1",
    # Datenformate
    "lxml>=4.9.3",
    "PyYAML>=6.0.1",
    "beautifulsoup4>=4.12.2",
    # Bildverarbeitung und OCR
    "Pillow>=10.1.0",
    "opencv-python>=4.8.1.78",
    "pytesseract>=0.3.10",
    "easyocr>=1.7.0",
    # Medien-Extraktion
    "moviepy>=1.0.3",
    "pydub>=0.25.1",
    "speechrecognition>=3.10.0",
    # Archiv-Extraktion
    "patool>=1.12",
    "py7zr>=0.20.8",
    # Dateityp-Erkennung
    "python-magic>=0.4.27",
    "aiofiles>=23.2.1",
    # Asynchrone Verarbeitung
    "celery>=5.3.4",
    "redis>=5.0.1",
    "rq>=1.15.1",
    # Parallelisierung
    "asyncio-throttle>=1.0.2",
    # Cloud und Deployment
    "gunicorn>=21.2.0",
    # Logging und Observability
    "structlog>=23.2.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.42b0",
    "opentelemetry-instrumentation-requests>=0.42b0",
    "opentelemetry-instrumentation-logging>=0.42b0",
    "opentelemetry-instrumentation-redis>=0.42b0",
    "opentelemetry-exporter-otlp>=1.21.0",
    "httpx>=0.28.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.2",
    "pre-commit>=3.5.0",
    # Security tools
    "bandit>=1.7.5",
    "safety>=2.3.5",
    "detect-secrets>=1.4.0",
    "semgrep>=1.50.0",
    "pip-licenses>=4.3.0",
]
docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.8",
    "mkdocstrings[python]>=0.24.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/universal-file-extractor-api"
Documentation = "https://yourusername.github.io/universal-file-extractor-api"
Repository = "https://github.com/yourusername/universal-file-extractor-api"
Issues = "https://github.com/yourusername/universal-file-extractor-api/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]

# Ruff-Konfiguration
[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
    "TCH", # flake8-type-checking
    "Q",  # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "FBT", # flake8-boolean-trap
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "C90", # mccabe
    "DTZ", # flake8-datetimez
    "ISC", # flake8-implicit-str-concat
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "PTH", # flake8-use-pathlib
    "BLE", # flake8-blind-except
    "FURB", # flake8-furbish
    "LOG", # flake8-logging-format
    "ARG", # flake8-unused-arguments
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "COM812", # disable to avoid formatter conflicts
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["PLR2004", "S101", "T201", "BLE", "W505", "RUF001", "ARG002", "DTZ"]
"app/api/routes/*.py" = ["FBT001", "FBT003", "BLE001"]
"app/extractors/*.py" = ["FBT001", "FBT002"]

[tool.ruff.lint.isort]
known-first-party = ["app"]
known-third-party = ["fastapi", "pydantic", "celery", "redis"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pycodestyle]
max-doc-length = 88



[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true
suppress-none-returning = true

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["frozenset", "tuple"]

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true



[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"
multiline-quotes = "double"

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true



[tool.ruff.format]
quote-style = "single"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# Pytest-Konfiguration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
# asyncio = "auto"  # Removed for pytest compatibility
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks end-to-end tests that require docker-compose",
]

# Coverage-Konfiguration
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# MyPy-Konfiguration (falls benötigt)
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "celery.*",
    "redis.*",
    "moviepy.*",
    "cv2.*",
    "easyocr.*",
    "pytesseract.*",
    "speech_recognition.*",
]
ignore_missing_imports = true

[dependency-groups]
dev = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "ruff>=0.12.7",
    "mypy>=1.17.1",
    "types-requests>=2.32.0.20240914",
    "types-defusedxml>=0.7.0.20240317",
]
