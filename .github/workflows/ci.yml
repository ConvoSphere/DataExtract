name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"
  UV_VERSION: "latest"

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install UV
      uses: astral-sh/setup-uv@v2
      with:
        version: ${{ env.UV_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          .uv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Install dependencies
      run: |
        uv sync --group dev

    - name: Run linting
      run: |
        uv run ruff check app/ tests/
        uv run ruff format --check app/ tests/

    - name: Run type checking
      run: |
        uv run mypy app/

    - name: Run tests
      run: |
        uv run pytest tests/ --cov=app --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install UV
      uses: astral-sh/setup-uv@v2
      with:
        version: ${{ env.UV_VERSION }}

    - name: Install dependencies
      run: |
        uv sync --group dev

    - name: Install security tools
      run: |
        pip install bandit safety detect-secrets semgrep
        sudo apt-get update
        sudo apt-get install -y wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb stable main" | sudo tee /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install -y trivy

    - name: Run comprehensive security scan
      run: |
        chmod +x security-scan.sh
        ./security-scan.sh

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          trivy-report.json
          semgrep-report.json
          security-report.md
          .secrets.baseline

    - name: Fail on critical security issues
      run: |
        if [ -f bandit-report.json ] && grep -q '"severity": "HIGH"' bandit-report.json; then
          echo "❌ Critical security issues found in code!"
          exit 1
        fi
        
        if [ -f trivy-report.json ] && grep -q '"Severity": "CRITICAL"' trivy-report.json; then
          echo "❌ Critical container vulnerabilities found!"
          exit 1
        fi
        
        echo "✅ Security scan passed!"

  docker-build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker images
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: false
        tags: |
          universal-file-extractor:latest
          universal-file-extractor:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  docker-compose-test:
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build test environment
      run: |
        docker-compose -f docker-compose.test.yml build

    - name: Run test environment
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 30
        docker-compose -f docker-compose.test.yml ps

    - name: Run integration tests
      run: |
        # Wait for services to be ready
        timeout 60 bash -c 'until curl -f http://localhost:8000/api/v1/health; do sleep 2; done'
        
        # Run basic API tests
        curl -X POST http://localhost:8000/api/v1/extract \
          -F "file=@tests/test_files/sample.txt" \
          -F "include_metadata=true" \
          -F "include_text=true"

    - name: Cleanup
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml down -v